@page "/Account/Login"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Components.Layout
@using StudentsManagement.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor

<section class="ftco-section">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        @* @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        } *@
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-overlay">
                <span>@errorMessage</span>
                <span class="close-btn" @onclick="() => errorMessage = null"></span>
            </div>
        } 
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6 col-lg-4">
                    <div class="login-wrap p-0">
                        <h3 class="mb-4 text-center">Have an account?</h3>
                        <div class="form-group">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@domain.com" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <button type="submit" class="form-control btn btn-primary submit px-3">Login</button>
                        </div>
                        <div class="form-group d-md-flex">
                            <div class="w-50">
                                <label class="form-label">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Remember me
                                </label>
                            </div>
                        </div>
                        <div class="social d-flex justify-content-center text-center">
                            <a href="/Account/ForgotPassword" class="px-2 py-2 mr-md-1 rounded">Forgot your password?</a>
                        </div>
                        <hr />

                        <div class="social d-flex justify-content-center text-center">
                            <a href="@(NavigationManager.GetUriWithQueryParameters("/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class=" px-2 py-2 mr-md-1 rounded">Register as a new user</a>
                        </div>
                        <hr />
                        <div class="social d-flex justify-content-center text-center">
                            <a href="/Account/ResendEmailConfirmation" class="px-2 py-2 mr-md-1 rounded">Resend email confirmation</a>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</section>

@code {
    private string? errorMessage;

    // Removed CascadingParameter, use IHttpContextAccessor instead
    private HttpContext? HttpContext => HttpContextAccessor.HttpContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user != null && user.AccountStatus == "Pending")
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
            return;
        }
        if (user != null)
        {
            if (user.AccountStatus == "Rejected")
            {
                Logger.LogWarning("User account was rejected!");
                RedirectManager.RedirectTo("Account/Lockout");
            }

            if (!user.EmailConfirmed)
            {
                errorMessage = "Your email is not confirmed. Please confirm your email to continue.";
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo("/"); // ReturnUrl
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Invalid login attempt.";
            }
        }
        // else
        // {
        //     errorMessage = "Invalid login attempt.";
        // }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
<style>
    .alert-overlay {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 90%;
        max-width: 500px;
        z-index: 1050; /* Ensures it stays above other elements */
        margin: 0;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .alert-overlay .close-btn {
            position: absolute;
            top: 5px;
            right: 10px;
            cursor: pointer;
        }

</style>
