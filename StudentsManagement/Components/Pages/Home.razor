@page "/"
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject BookService BookService
@inject HostelService HostelService
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Client.Services
@using StudentsManagement.Data
@using StudentsManagement.Shared.Models
@using System.Security.Claims
@inject AdminMessageService AdminMessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="row">
    <div class="col-lg-3 col-6">
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@totalStudents</h3>
                <p>New Students</p>
            </div>
            <div class="icon">
                <i class="fas fa-user-graduate"></i>
            </div>
            <a href="/students-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@totalHotels</h3>
                <p>Hostel</p>
            </div>
            <div class="icon">
                <i class="fas fa-home"></i>
            </div>
            <a href="/hostels-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@totalTeachers</h3>
                <p>Teachers</p>
            </div>
            <div class="icon">
                <i class="fas fa-chalkboard-teacher"></i>
            </div>
            <a href="/teachers-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@totalBooks</h3>
                <p>Books</p>
            </div>
            <div class="icon">
                <i class="fas fa-book"></i>
            </div>
            <a href="/books-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
</div>

<div class="row" style="height: calc(110vh - 300px);">
    <!-- Chat Section -->
    <section class="col-md-6 d-flex flex-column">
        <div class="card direct-chat direct-chat-primary flex-grow-1">
            <div class="card-header chat-header" style="display: flex; justify-content: space-between; align-items: center;">
                <h3 class="card-title">
                    <i class="fas fa-comments"></i> Admin Chat Box
                </h3>
                <div class="card-tools" style="display: flex; align-items: center;">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-tool" data-card-widget="remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div id="chatMessages" class="direct-chat-messages" style="flex-grow: 1; overflow-y: auto;">
                @foreach (var message in adminMessages)
                {
                    <!-- Check if the message is from the current user by comparing the email -->
                    @if (message.AdminId == currentUserId) // AdminEmail == currentUserEmail
                    {
                        <!-- Current user message (aligned to the right) -->
                        <div class="direct-chat-msg right">
                            <img class="direct-chat-img-right" src="@message.AvatarUrl" alt="user image" title="@message.AdminName"> <!-- Hover to show name -->
                            <div class="direct-chat-text-wrapper-right">
                                <div class="direct-chat-infos clearfix">
                                    <span class="direct-chat-name-right">@message.AdminName</span>
                                </div>
                                <div class="direct-chat-text-right">
                                    @message.Message
                                </div>
                                <span class="direct-chat-timestamp float-right">@message.SentAt.ToString("g")</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Other users' messages (aligned to the left) -->
                        <div class="direct-chat-msg left">
                            <img class="direct-chat-img" src="@message.AvatarUrl" alt="user image" title="@message.AdminName"> <!-- Hover to show name -->
                            <div class="direct-chat-text-wrapper-left">
                                <div class="direct-chat-infos clearfix">
                                    <span class="direct-chat-name-left">@message.AdminName</span>
                                </div>
                                <div class="direct-chat-text-left">
                                    @message.Message
                                </div>
                                <span class="direct-chat-timestamp float-right">@message.SentAt.ToString("g")</span>
                            </div>
                        </div>
                    }
                }
            </div>


            <!-- Footer input -->
            <div class="card-footer">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Type Message ..." @bind="newMessage">
                    <span class="input-group-append">
                        <!-- Button to toggle the emoji picker -->
                        <button type="button" class="btn btn-secondary" @onclick="ToggleEmojiPicker">
                            <i class="fas fa-smile"></i>
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="SendMessage">Send</button>
                    </span>
                </div>

                <!-- Emoji Picker - hidden by default, shown when toggled -->
                <div class="emoji-picker" style="display: @(showEmojiPicker ? "block" : "none"); margin-top: 10px;">
                    <div class="emoji-list">
                        @foreach (var emoji in emojis)
                        {
                            <span class="emoji" @onclick="() => AddEmojiToMessage(emoji)" style="cursor: pointer; font-size: 24px; margin: 5px;">@emoji</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Calendar Section -->
    <section class="col-md-6 d-flex flex-column">
        <div class="card bg-gradient-success flex-grow-1">
            <div class="card-header border-0">
                <h3 class="card-title">
                    <i class="far fa-calendar-alt"></i>
                    Calendar
                </h3>
                <div class="card-tools">
                    <div class="btn-group">
                        <button type="button" class="btn btn-success btn-sm dropdown-toggle" data-toggle="dropdown" data-offset="-52">
                            <i class="fas fa-bars"></i>
                        </button>
                        <div class="dropdown-menu" role="menu">
                            <a href="#" class="dropdown-item">Add new event</a>
                            <a href="#" class="dropdown-item">Clear events</a>
                            <div class="dropdown-divider"></div>
                            <a href="#" class="dropdown-item">View calendar</a>
                        </div>
                    </div>
                    <button type="button" class="btn btn-success btn-sm" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-success btn-sm" data-card-widget="remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="card-body pt-0" style="overflow-y: auto; padding: 0 10px;">
                <div id="calendar" style="width: 100%; height: 90%;"></div>
            </div>
        </div>
    </section>
</div>

@code {
    private int totalStudents;
    private int totalTeachers;
    private int totalBooks;
    private int totalHotels;

    private List<AdminMessage> adminMessages = new();
    private string newMessage = "";
    private string currentAdminName;
    private string currentAdminRole;
    private string photoUrl;
    private string currentUserEmail;
    private string currentUserId;

    private List<string> emojis = new List<string> { "😀", "😁", "😂", "🤣", "😊", "😍", "😎", "🥳", "😜", "🤩", "❤️", "👍", "👏", "🔥", "🎉", "🎂", "💯" };
    private bool showEmojiPicker = false;

    // Hàm để mở/đóng emoji picker
    private void ToggleEmojiPicker()
    {
        showEmojiPicker = !showEmojiPicker;
    }

    // Hàm thêm emoji vào tin nhắn
    private void AddEmojiToMessage(string emoji)
    {
        newMessage += emoji;
        showEmojiPicker = false;  // Tự động đóng emoji picker sau khi chọn
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Sequentially fetch the counts
        totalStudents = await StudentService.GetTotalStudentsCountAsync();
        totalTeachers = await TeacherService.GetTotalTeachersCountAsync();
        totalBooks = await BookService.GetTotalBooksCountAsync();
        totalHotels = await HostelService.GetTotalHostelsCountAsync();

        // Fetch current user information after getting the counts
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;
        if (userClaims.Identity != null && userClaims.Identity.IsAuthenticated)
        {
            currentAdminName = userClaims.Identity.Name ?? "Unknown Admin";
            var userId = userClaims.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value; // email  ClaimTypes.Email
           // currentUserEmail = email;
            currentUserId = userId;

            if (!string.IsNullOrEmpty(userId))
            {
                // Fetch user info sequentially
                var user = await UserManager.FindByIdAsync(userId).ConfigureAwait(false); // .ConfigureAwait(false)
                if (user != null)
                {
                    currentAdminName = $"{user.FirstName} {user.MiddleName} {user.LastName}";
                    photoUrl = !string.IsNullOrEmpty(user.Photo) ? $"/Images/{user.Photo}" : "default-avatar-url";
                    var roles = await UserManager.GetRolesAsync(user).ConfigureAwait(false);

                    currentAdminRole = roles.FirstOrDefault() ?? "Unknown";
                }
            }
        }

        try
        {
            adminMessages = await AdminMessageService.GetMessagesAsync();
            if (adminMessages == null)
            {
                adminMessages = new List<AdminMessage>(); // Initialize to prevent null reference
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching messages: {ex.Message}");
        }
    }

    // Hàm trả về CSS class dựa vào vai trò
    private string GetMessageCssClassByRole(string role)
    {
        return role switch
        {
            "System" => "system-message",
            "Academic" => "academic-message",
            "Library" => "library-message",
            "Hostel" => "hostel-message",
            "FrontOffice" => "frontoffice-message",
            "SystemSetting" => "systemsetting-message",
            _ => "default-message"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Khởi tạo lịch bằng cách gọi hàm JS
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeCalendar");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing calendar: {ex.Message}");
            }
        }
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    // Hàm gửi tin nhắn
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            var message = new AdminMessage
                {
                    AdminId = currentUserId,
                    AdminName = currentAdminName,
                    Message = newMessage,
                    SentAt = DateTime.Now,
                    IsOwnMessage = true,
                    AvatarUrl = photoUrl,
                    AdminRole = currentAdminRole, // Assign the current role
                  //  AdminEmail = currentUserEmail // Include email
                };

            var result = await AdminMessageService.SendMessageAsync(message);

            if (result)
            {
                adminMessages.Add(message);
                newMessage = "";
                StateHasChanged();
            }
        }
    }

}







@*
@page "/"
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject BookService BookService
@inject HostelService HostelService
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Client.Services
@using StudentsManagement.Data
@using StudentsManagement.Shared.Models
@using System.Security.Claims
@inject AdminMessageService AdminMessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="row">
    <div class="col-lg-3 col-6">
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@totalStudents</h3>
                <p>New Students</p>
            </div>
            <div class="icon">
                <i class="fas fa-user-graduate"></i>
            </div>
            <a href="/students-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@totalHotels</h3>
                <p>Hostel</p>
            </div>
            <div class="icon">
                <i class="fas fa-home"></i>
            </div>
            <a href="/hostels-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@totalTeachers</h3>
                <p>Teachers</p>
            </div>
            <div class="icon">
                <i class="fas fa-chalkboard-teacher"></i>
            </div>
            <a href="/teachers-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@totalBooks</h3>
                <p>Books</p>
            </div>
            <div class="icon">
                <i class="fas fa-book"></i>
            </div>
            <a href="/books-list" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
</div>

<div class="row" style="height: calc(110vh - 300px);">
    <!-- Chat Section -->
    <section class="col-md-6 d-flex flex-column">
        <div class="card direct-chat direct-chat-primary flex-grow-1">
            <div class="card-header chat-header" style="display: flex; justify-content: space-between; align-items: center;">
                <h3 class="card-title">
                    <i class="fas fa-comments"></i> Admin Chat Box
                </h3>
                <div class="card-tools" style="display: flex; align-items: center;">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-tool" data-card-widget="remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div id="chatMessages" class="direct-chat-messages" style="flex-grow: 1; overflow-y: auto;">
                @foreach (var message in adminMessages)
                {
                    <!-- Check if the message is from the current user by comparing the email -->
                    @if (message.AdminEmail == currentUserEmail)
                    {
                        <!-- Current user message (aligned to the right) -->
                        <div class="direct-chat-msg right">
                            <img class="direct-chat-img-right" src="@message.AvatarUrl" alt="user image" title="@message.AdminName"> <!-- Hover to show name -->
                            <div class="direct-chat-text-wrapper-right">
                                <div class="direct-chat-infos clearfix">
                                    <span class="direct-chat-name-right">@message.AdminName</span>
                                </div>
                                <div class="direct-chat-text-right">
                                    @message.Message
                                </div>
                                <span class="direct-chat-timestamp float-right">@message.SentAt.ToString("g")</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Other users' messages (aligned to the left) -->
                        <div class="direct-chat-msg left">
                            <img class="direct-chat-img" src="@message.AvatarUrl" alt="user image" title="@message.AdminName"> <!-- Hover to show name -->
                            <div class="direct-chat-text-wrapper-left">
                                <div class="direct-chat-infos clearfix">
                                    <span class="direct-chat-name-left">@message.AdminName</span>
                                </div>
                                <div class="direct-chat-text-left">
                                    @message.Message
                                </div>
                                <span class="direct-chat-timestamp float-right">@message.SentAt.ToString("g")</span>
                            </div>
                        </div>
                    }
                }
            </div>


            <!-- Footer input -->
            <div class="card-footer">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Type Message ..." @bind="newMessage">
                    <span class="input-group-append">
                        <!-- Button to toggle the emoji picker -->
                        <button type="button" class="btn btn-secondary" @onclick="ToggleEmojiPicker">
                            <i class="fas fa-smile"></i>
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="SendMessage">Send</button>
                    </span>
                </div>

                <!-- Emoji Picker - hidden by default, shown when toggled -->
                <div class="emoji-picker" style="display: @(showEmojiPicker ? "block" : "none"); margin-top: 10px;">
                    <div class="emoji-list">
                        @foreach (var emoji in emojis)
                        {
                            <span class="emoji" @onclick="() => AddEmojiToMessage(emoji)" style="cursor: pointer; font-size: 24px; margin: 5px;">@emoji</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Calendar Section -->
    <section class="col-md-6 d-flex flex-column">
        <div class="card bg-gradient-success flex-grow-1">
            <div class="card-header border-0">
                <h3 class="card-title">
                    <i class="far fa-calendar-alt"></i>
                    Calendar
                </h3>
                <div class="card-tools">
                    <div class="btn-group">
                        <button type="button" class="btn btn-success btn-sm dropdown-toggle" data-toggle="dropdown" data-offset="-52">
                            <i class="fas fa-bars"></i>
                        </button>
                        <div class="dropdown-menu" role="menu">
                            <a href="#" class="dropdown-item">Add new event</a>
                            <a href="#" class="dropdown-item">Clear events</a>
                            <div class="dropdown-divider"></div>
                            <a href="#" class="dropdown-item">View calendar</a>
                        </div>
                    </div>
                    <button type="button" class="btn btn-success btn-sm" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-success btn-sm" data-card-widget="remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="card-body pt-0" style="overflow-y: auto; padding: 0 10px;">
                <div id="calendar" style="width: 100%; height: 90%;"></div>
            </div>
        </div>
    </section>
</div>

@code {
    private int totalStudents;
    private int totalTeachers;
    private int totalBooks;
    private int totalHotels;

    private List<AdminMessage> adminMessages = new();
    private string newMessage = "";
    private string currentAdminName;
    private string currentAdminRole;
    private string photoUrl;
    private string currentUserEmail;

    private List<string> emojis = new List<string> { "😀", "😁", "😂", "🤣", "😊", "😍", "😎", "🥳", "😜", "🤩", "❤️", "👍", "👏", "🔥", "🎉", "🎂", "💯" };
    private bool showEmojiPicker = false;

    // Hàm để mở/đóng emoji picker
    private void ToggleEmojiPicker()
    {
        showEmojiPicker = !showEmojiPicker;
    }

    // Hàm thêm emoji vào tin nhắn
    private void AddEmojiToMessage(string emoji)
    {
        newMessage += emoji;
        showEmojiPicker = false;  // Tự động đóng emoji picker sau khi chọn
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Sequentially fetch the counts
        totalStudents = await StudentService.GetTotalStudentsCountAsync();
        totalTeachers = await TeacherService.GetTotalTeachersCountAsync();
        totalBooks = await BookService.GetTotalBooksCountAsync();
        totalHotels = await HostelService.GetTotalHostelsCountAsync();

        // Fetch current user information after getting the counts
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity != null && userClaims.Identity.IsAuthenticated)
        {
            currentAdminName = userClaims.Identity.Name ?? "Unknown Admin";
            var email = userClaims.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
            currentUserEmail = email;

            if (!string.IsNullOrEmpty(email))
            {
                // Fetch user info sequentially
                var user = await UserManager.FindByEmailAsync(email).ConfigureAwait(false); // .ConfigureAwait(false)
                if (user != null)
                {
                    currentAdminName = $"{user.FirstName} {user.MiddleName} {user.LastName}";
                    photoUrl = !string.IsNullOrEmpty(user.Photo) ? $"/Images/{user.Photo}" : "default-avatar-url";
                    var roles = await UserManager.GetRolesAsync(user).ConfigureAwait(false);

                    currentAdminRole = roles.FirstOrDefault() ?? "Unknown";
                }
            }
        }

        // Fetch admin messages sequentially
        adminMessages = await AdminMessageService.GetMessagesAsync();
    }

    // Hàm trả về CSS class dựa vào vai trò
    private string GetMessageCssClassByRole(string role)
    {
        return role switch
        {
            "System" => "system-message",
            "Academic" => "academic-message",
            "Library" => "library-message",
            "Hostel" => "hostel-message",
            "FrontOffice" => "frontoffice-message",
            "SystemSetting" => "systemsetting-message",
            _ => "default-message"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Khởi tạo lịch bằng cách gọi hàm JS
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeCalendar");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing calendar: {ex.Message}");
            }
        }
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    // Hàm gửi tin nhắn
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            var message = new AdminMessage
                {
                    AdminName = currentAdminName,
                    Message = newMessage,
                    SentAt = DateTime.Now,
                    IsOwnMessage = true,
                    AvatarUrl = photoUrl,
                    AdminRole = currentAdminRole, // Assign the current role
                    AdminEmail = currentUserEmail // Include email
                };

            var result = await AdminMessageService.SendMessageAsync(message);

            if (result)
            {
                adminMessages.Add(message);
                newMessage = "";
                StateHasChanged();
            }
        }
    }

}

*@